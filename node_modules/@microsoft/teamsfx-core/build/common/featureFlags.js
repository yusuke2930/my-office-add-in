"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.featureFlagManager = exports.FeatureFlagManager = exports.FeatureFlags = exports.isCopilotAuthEnabled = exports.isChatParticipantEnabled = exports.isNewProjectTypeEnabled = exports.isAsyncAppValidationEnabled = exports.isTdpTemplateCliTestEnabled = exports.isOfficeJSONAddinEnabled = exports.isNewGeneratorEnabled = exports.enableMETestToolByDefault = exports.enableTestToolByDefault = exports.isApiCopilotPluginEnabled = exports.isCopilotPluginEnabled = exports.isCLIDotNetEnabled = exports.initializePreviewFeatureFlags = exports.isFeatureFlagEnabled = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const constants_1 = require("./constants");
// Determine whether feature flag is enabled based on environment variable setting
function isFeatureFlagEnabled(featureFlagName, defaultValue = false) {
    const flag = process.env[featureFlagName];
    if (flag === undefined) {
        return defaultValue; // allows consumer to set a default value when environment variable not set
    }
    else {
        return flag === "1" || flag.toLowerCase() === "true"; // can enable feature flag by set environment variable value to "1" or "true"
    }
}
exports.isFeatureFlagEnabled = isFeatureFlagEnabled;
/**
 * Update all preview feature flags.
 */
function initializePreviewFeatureFlags() { }
exports.initializePreviewFeatureFlags = initializePreviewFeatureFlags;
function isCLIDotNetEnabled() {
    return exports.featureFlagManager.getBooleanValue(FeatureFlags.CLIDotNet);
}
exports.isCLIDotNetEnabled = isCLIDotNetEnabled;
function isCopilotPluginEnabled() {
    return exports.featureFlagManager.getBooleanValue(FeatureFlags.CopilotPlugin);
}
exports.isCopilotPluginEnabled = isCopilotPluginEnabled;
function isApiCopilotPluginEnabled() {
    return (exports.featureFlagManager.getBooleanValue(FeatureFlags.ApiCopilotPlugin) && isCopilotPluginEnabled());
}
exports.isApiCopilotPluginEnabled = isApiCopilotPluginEnabled;
function enableTestToolByDefault() {
    return exports.featureFlagManager.getBooleanValue(FeatureFlags.TestTool);
}
exports.enableTestToolByDefault = enableTestToolByDefault;
function enableMETestToolByDefault() {
    return exports.featureFlagManager.getBooleanValue(FeatureFlags.METestTool);
}
exports.enableMETestToolByDefault = enableMETestToolByDefault;
function isNewGeneratorEnabled() {
    return exports.featureFlagManager.getBooleanValue(FeatureFlags.NewGenerator);
}
exports.isNewGeneratorEnabled = isNewGeneratorEnabled;
function isOfficeJSONAddinEnabled() {
    return exports.featureFlagManager.getBooleanValue(FeatureFlags.OfficeAddin);
}
exports.isOfficeJSONAddinEnabled = isOfficeJSONAddinEnabled;
function isTdpTemplateCliTestEnabled() {
    return exports.featureFlagManager.getBooleanValue(FeatureFlags.TdpTemplateCliTest);
}
exports.isTdpTemplateCliTestEnabled = isTdpTemplateCliTestEnabled;
function isAsyncAppValidationEnabled() {
    return exports.featureFlagManager.getBooleanValue(FeatureFlags.AsyncAppValidation);
}
exports.isAsyncAppValidationEnabled = isAsyncAppValidationEnabled;
function isNewProjectTypeEnabled() {
    return exports.featureFlagManager.getBooleanValue(FeatureFlags.NewProjectType);
}
exports.isNewProjectTypeEnabled = isNewProjectTypeEnabled;
function isChatParticipantEnabled() {
    return exports.featureFlagManager.getBooleanValue(FeatureFlags.ChatParticipant);
}
exports.isChatParticipantEnabled = isChatParticipantEnabled;
function isCopilotAuthEnabled() {
    return exports.featureFlagManager.getBooleanValue(FeatureFlags.CopilotAuth);
}
exports.isCopilotAuthEnabled = isCopilotAuthEnabled;
class FeatureFlags {
}
exports.FeatureFlags = FeatureFlags;
FeatureFlags.CLIDotNet = { name: constants_1.FeatureFlagName.CLIDotNet, defaultValue: "false" };
FeatureFlags.CopilotPlugin = { name: constants_1.FeatureFlagName.CopilotPlugin, defaultValue: "false" };
FeatureFlags.ApiCopilotPlugin = {
    name: constants_1.FeatureFlagName.ApiCopilotPlugin,
    defaultValue: "false",
};
FeatureFlags.TestTool = { name: constants_1.FeatureFlagName.TestTool, defaultValue: "true" };
FeatureFlags.METestTool = { name: constants_1.FeatureFlagName.METestTool, defaultValue: "true" };
FeatureFlags.NewGenerator = { name: constants_1.FeatureFlagName.NewGenerator, defaultValue: "false" };
FeatureFlags.OfficeAddin = { name: constants_1.FeatureFlagName.OfficeAddin, defaultValue: "false" };
FeatureFlags.TdpTemplateCliTest = {
    name: constants_1.FeatureFlagName.TdpTemplateCliTest,
    defaultValue: "false",
};
FeatureFlags.AsyncAppValidation = {
    name: constants_1.FeatureFlagName.AsyncAppValidation,
    defaultValue: "false",
};
FeatureFlags.NewProjectType = { name: constants_1.FeatureFlagName.NewProjectType, defaultValue: "true" };
FeatureFlags.ChatParticipant = {
    name: constants_1.FeatureFlagName.ChatParticipant,
    defaultValue: "false",
};
FeatureFlags.CopilotAuth = { name: constants_1.FeatureFlagName.CopilotAuth, defaultValue: "false" };
FeatureFlags.CustomizeGpt = { name: constants_1.FeatureFlagName.CustomizeGpt, defaultValue: "false" };
class FeatureFlagManager {
    getBooleanValue(featureFlag) {
        return isFeatureFlagEnabled(featureFlag.name, featureFlag.defaultValue === "true" || featureFlag.defaultValue === "1");
    }
    getStringValue(featureFlag) {
        return process.env[featureFlag.name] || featureFlag.defaultValue;
    }
    list() {
        return Object.values(FeatureFlags);
    }
}
exports.FeatureFlagManager = FeatureFlagManager;
exports.featureFlagManager = new FeatureFlagManager();
//# sourceMappingURL=featureFlags.js.map