"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.OfficeAddinGeneratorNew = exports.getHost = exports.OfficeAddinGenerator = void 0;
const tslib_1 = require("tslib");
/**
 * @author yefuwang@microsoft.com
 */
const lib_1 = require("@feathersjs/hooks/lib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const childProcess = tslib_1.__importStar(require("child_process"));
const office_addin_manifest_1 = require("office-addin-manifest");
const office_addin_project_1 = require("office-addin-project");
const path_1 = require("path");
const util_1 = require("util");
const localizeUtils_1 = require("../../../common/localizeUtils");
const error_1 = require("../../../error");
const create_1 = require("../../../question/create");
const questionNames_1 = require("../../../question/questionNames");
const actionExecutionMW_1 = require("../../middleware/actionExecutionMW");
const generator_1 = require("../generator");
const projectConfig_1 = require("../officeXMLAddin/projectConfig");
const helperMethods_1 = require("./helperMethods");
const lodash_1 = require("lodash");
const utils_1 = require("../utils");
const templateGenerator_1 = require("../templates/templateGenerator");
const utils_2 = require("../../utils");
const componentName = "office-addin";
const telemetryEvent = "generate";
const templateName = "office-addin";
const templateNameForWXPO = "office-json-addin";
/**
 * case 1: project-type=office-xml-addin-type AND addin-host=outlook
 * case 2: project-type=office-addin-type (addin-host=undefined)
 * case 3: project-type=outlook-addin-type (addin-host=undefined)
 */
class OfficeAddinGenerator {
    static async generate(context, inputs, destinationPath) {
        const result = await OfficeAddinGenerator.doScaffolding(context, inputs, destinationPath);
        if (result.isErr()) {
            return teamsfx_api_1.err(result.error);
        }
        // If lang is undefined, it means the project is created from a folder.
        const lang = lodash_1.toLower(inputs[questionNames_1.QuestionNames.ProgrammingLanguage]);
        const langKey = inputs[questionNames_1.QuestionNames.Capabilities] === create_1.CapabilityOptions.outlookAddinImport().id ||
            inputs[questionNames_1.QuestionNames.Capabilities] === create_1.CapabilityOptions.officeAddinImport().id
            ? "ts"
            : utils_1.convertToLangKey(lang);
        const templateRes = await generator_1.Generator.generateTemplate(context, destinationPath, inputs[questionNames_1.QuestionNames.ProjectType] === create_1.ProjectTypeOptions.officeAddin().id
            ? templateNameForWXPO
            : templateName, langKey);
        if (templateRes.isErr())
            return teamsfx_api_1.err(templateRes.error);
        return teamsfx_api_1.ok(undefined);
    }
    static async childProcessExec(cmdLine) {
        return util_1.promisify(childProcess.exec)(cmdLine);
    }
    static async doScaffolding(context, inputs, destinationPath) {
        const name = inputs[questionNames_1.QuestionNames.AppName];
        const addinRoot = destinationPath;
        const fromFolder = inputs[questionNames_1.QuestionNames.OfficeAddinFolder];
        const language = lodash_1.toLower(inputs[questionNames_1.QuestionNames.ProgrammingLanguage]);
        const projectType = inputs[questionNames_1.QuestionNames.ProjectType];
        const capability = inputs[questionNames_1.QuestionNames.Capabilities];
        const inputHost = inputs[questionNames_1.QuestionNames.OfficeAddinHost];
        let host = inputHost;
        if (projectType === create_1.ProjectTypeOptions.outlookAddin().id ||
            (projectType === create_1.ProjectTypeOptions.officeXMLAddin().id &&
                inputHost === create_1.OfficeAddinHostOptions.outlook().id)) {
            host = "outlook";
        }
        else if (projectType === create_1.ProjectTypeOptions.officeAddin().id) {
            if (capability === "json-taskpane") {
                host = "wxpo"; // wxpo - support word, excel, powerpoint, outlook
            }
            else if (capability === create_1.CapabilityOptions.officeContentAddin().id) {
                host = "xp"; // content add-in support excel, powerpoint
            }
        }
        const workingDir = process.cwd();
        const importProgressStr = projectType === create_1.ProjectTypeOptions.officeAddin().id
            ? localizeUtils_1.getLocalizedString("core.generator.officeAddin.importOfficeProject.title")
            : localizeUtils_1.getLocalizedString("core.generator.officeAddin.importProject.title");
        const importProgress = context.userInteraction.createProgressBar(importProgressStr, 3);
        process.chdir(addinRoot);
        try {
            if (!fromFolder) {
                // from template
                const framework = create_1.getOfficeAddinFramework(inputs);
                const templateConfig = projectConfig_1.getOfficeAddinTemplateConfig(projectType, inputs[questionNames_1.QuestionNames.OfficeAddinHost]);
                const projectLink = templateConfig[capability].framework[framework][language];
                // Copy project template files from project repository
                if (projectLink) {
                    const fetchRes = await utils_2.fetchAndUnzip("office-addin-generator", projectLink, addinRoot);
                    if (fetchRes.isErr()) {
                        return teamsfx_api_1.err(fetchRes.error);
                    }
                    let cmdLine = ""; // Call 'convert-to-single-host' npm script in generated project, passing in host parameter
                    if (inputs[questionNames_1.QuestionNames.ProjectType] === create_1.ProjectTypeOptions.officeAddin().id) {
                        cmdLine = `npm run convert-to-single-host --if-present -- ${host} json`;
                    }
                    else {
                        cmdLine = `npm run convert-to-single-host --if-present -- ${host}`;
                    }
                    await OfficeAddinGenerator.childProcessExec(cmdLine);
                    const manifestPath = templateConfig[capability].manifestPath;
                    // modify manifest guid and DisplayName
                    await office_addin_manifest_1.OfficeAddinManifest.modifyManifestFile(`${path_1.join(addinRoot, manifestPath)}`, "random", `${name}`);
                    await helperMethods_1.HelperMethods.moveManifestLocation(addinRoot, manifestPath);
                }
            }
            else {
                await importProgress.start();
                // from existing project
                await importProgress.next(localizeUtils_1.getLocalizedString("core.generator.officeAddin.importProject.copyFiles"));
                helperMethods_1.HelperMethods.copyAddinFiles(fromFolder, addinRoot);
                const sourceManifestFile = inputs[questionNames_1.QuestionNames.OfficeAddinManifest];
                let manifestFile = sourceManifestFile.replace(fromFolder, addinRoot);
                await importProgress.next(localizeUtils_1.getLocalizedString("core.generator.officeAddin.importProject.convertProject"));
                if (manifestFile.endsWith(".xml")) {
                    // Need to convert to json project first
                    await office_addin_project_1.convertProject(manifestFile);
                    manifestFile = manifestFile.replace(/\.xml$/, ".json");
                }
                inputs[questionNames_1.QuestionNames.OfficeAddinHost] = await getHost(manifestFile);
                await importProgress.next(localizeUtils_1.getLocalizedString("core.generator.officeAddin.importProject.updateManifest"));
                await helperMethods_1.HelperMethods.updateManifest(destinationPath, manifestFile);
            }
            process.chdir(workingDir);
            await importProgress.end(true, true);
            return teamsfx_api_1.ok(undefined);
        }
        catch (e) {
            process.chdir(workingDir);
            await importProgress.end(false, true);
            return teamsfx_api_1.err(error_1.assembleError(e));
        }
    }
}
tslib_1.__decorate([
    lib_1.hooks([
        actionExecutionMW_1.ActionExecutionMW({
            enableTelemetry: true,
            telemetryComponentName: componentName,
            telemetryEventName: telemetryEvent,
            errorSource: componentName,
        }),
    ]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, String]),
    tslib_1.__metadata("design:returntype", Promise)
], OfficeAddinGenerator, "generate", null);
exports.OfficeAddinGenerator = OfficeAddinGenerator;
async function getHost(addinManifestPath) {
    var _a, _b, _c;
    // Read add-in manifest file
    const addinManifest = await teamsfx_api_1.ManifestUtil.loadFromPath(addinManifestPath);
    let host = "Outlook";
    switch ((_c = (_b = (_a = addinManifest.extensions) === null || _a === void 0 ? void 0 : _a[0].requirements) === null || _b === void 0 ? void 0 : _b.scopes) === null || _c === void 0 ? void 0 : _c[0]) {
        case "document":
            host = "Word";
            break;
        case "mail":
            host = "Outlook";
            break;
        // case "notebook":
        //   host = "OneNote";
        case "presentation":
            host = "PowerPoint";
            break;
        // case "project":
        //   host = "Project";
        case "workbook":
            host = "Excel";
            break;
    }
    return host;
}
exports.getHost = getHost;
class OfficeAddinGeneratorNew extends templateGenerator_1.DefaultTemplateGenerator {
    constructor() {
        super(...arguments);
        this.componentName = "office-addin-generator";
    }
    // activation condition
    activate(context, inputs) {
        const projectType = inputs[questionNames_1.QuestionNames.ProjectType];
        return create_1.ProjectTypeOptions.officeAddinAllIds().includes(projectType);
    }
    async getTemplateInfos(context, inputs, destinationPath, actionContext) {
        const projectType = inputs[questionNames_1.QuestionNames.ProjectType];
        const tplName = projectType === create_1.ProjectTypeOptions.officeAddin().id ? templateNameForWXPO : templateName;
        let lang = lodash_1.toLower(inputs[questionNames_1.QuestionNames.ProgrammingLanguage]);
        lang =
            inputs[questionNames_1.QuestionNames.Capabilities] === create_1.CapabilityOptions.outlookAddinImport().id ||
                inputs[questionNames_1.QuestionNames.Capabilities] === create_1.CapabilityOptions.officeAddinImport().id
                ? create_1.ProgrammingLanguage.TS
                : lang;
        return Promise.resolve(teamsfx_api_1.ok([{ templateName: tplName, language: lang }]));
    }
    async post(context, inputs, destinationPath, actionContext) {
        return await OfficeAddinGenerator.doScaffolding(context, inputs, destinationPath);
    }
}
exports.OfficeAddinGeneratorNew = OfficeAddinGeneratorNew;
//# sourceMappingURL=generator.js.map