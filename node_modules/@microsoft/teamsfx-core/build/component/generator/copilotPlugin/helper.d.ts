/**
 * @author yuqzho@microsoft.com
 */
import { Context, FxError, OpenAIPluginManifest, Result, TeamsAppManifest, ApiOperation, Warning, Inputs } from "@microsoft/teamsfx-api";
import { ErrorType as ApiSpecErrorType, WarningResult, SpecParserError, ErrorResult as ApiSpecErrorResult, ParseOptions } from "@microsoft/m365-spec-parser";
import { OpenAPIV3 } from "openapi-types";
declare enum OpenAIPluginManifestErrorType {
    AuthNotSupported = "openai-pliugin-auth-not-supported",
    ApiUrlMissing = "openai-plugin-api-url-missing"
}
export declare const copilotPluginParserOptions: ParseOptions;
export declare const specParserGenerateResultTelemetryEvent = "spec-parser-generate-result";
export declare const specParserGenerateResultAllSuccessTelemetryProperty = "all-success";
export declare const specParserGenerateResultWarningsTelemetryProperty = "warnings";
export declare const invalidApiSpecErrorName = "invalid-api-spec";
export declare const defaultApiSpecFolderName = "apiSpecificationFile";
export declare const defaultApiSpecYamlFileName = "openapi.yaml";
export declare const defaultApiSpecJsonFileName = "openapi.json";
export declare const defaultPluginManifestFileName = "ai-plugin.json";
export interface ErrorResult {
    /**
     * The type of error.
     */
    type: ApiSpecErrorType | OpenAIPluginManifestErrorType;
    /**
     * The content of the error.
     */
    content: string;
    data?: any;
}
export declare class OpenAIPluginManifestHelper {
    static loadOpenAIPluginManifest(input: string): Promise<OpenAIPluginManifest>;
    static updateManifest(openAiPluginManifest: OpenAIPluginManifest, teamsAppManifest: TeamsAppManifest, manifestPath: string): Promise<Result<undefined, FxError>>;
}
export declare function listOperations(context: Context, manifest: OpenAIPluginManifest | undefined, apiSpecUrl: string | undefined, inputs: Inputs, includeExistingAPIs?: boolean, shouldLogWarning?: boolean, existingCorrelationId?: string): Promise<Result<ApiOperation[], ErrorResult[]>>;
export declare function listPluginExistingOperations(manifest: TeamsAppManifest, teamsManifestPath: string, destinationApiSpecFilePath: string): Promise<string[]>;
export declare function logValidationResults(errors: ErrorResult[], warnings: WarningResult[], context: Context, isApiSpec: boolean, shouldLogWarning: boolean, shouldSkipTelemetry: boolean, existingCorrelationId?: string): void;
export declare function generateScaffoldingSummary(warnings: Warning[], teamsManifest: TeamsAppManifest, apiSpecFilePath: string): string;
export declare function convertSpecParserErrorToFxError(error: SpecParserError): FxError;
export declare function isYamlSpecFile(specPath: string): Promise<boolean>;
export declare function formatValidationErrors(errors: ApiSpecErrorResult[], inputs: Inputs): ApiSpecErrorResult[];
export declare function updateForCustomApi(spec: OpenAPIV3.Document, language: string, destinationPath: string, openapiSpecFileName: string): Promise<void>;
export declare function getEnvName(authName: string, authType?: string): string;
export {};
//# sourceMappingURL=helper.d.ts.map