import { Colors, FxError, IPlugin, Platform, PluginManifestSchema, Result, TeamsAppManifest } from "@microsoft/teamsfx-api";
import { WrapDriverContext } from "../../util/wrapUtil";
import { PluginManifestValidationResult } from "../interfaces/ValidationResult";
export declare class PluginManifestUtils {
    readPluginManifestFile(path: string): Promise<Result<PluginManifestSchema, FxError>>;
    /**
     * Get plugin manifest with env value filled.
     * @param path path of declaraitve Copilot
     * @returns resolved manifest
     */
    getManifest(path: string, context?: WrapDriverContext): Promise<Result<PluginManifestSchema, FxError>>;
    validateAgainstSchema(plugin: IPlugin, path: string, context?: WrapDriverContext): Promise<Result<PluginManifestValidationResult, FxError>>;
    getApiSpecFilePathFromTeamsManifest(manifest: TeamsAppManifest, manifestPath: string): Promise<Result<string[], FxError>>;
    logValidationErrors(validationRes: PluginManifestValidationResult, platform: Platform): string | Array<{
        content: string;
        color: Colors;
    }>;
    getApiSpecFilePathFromPlugin(plugin: PluginManifestSchema, pluginPath: string): Promise<string[]>;
}
export declare const pluginManifestUtils: PluginManifestUtils;
//# sourceMappingURL=PluginManifestUtils.d.ts.map