import { FxError, Result, DeclarativeCopilotManifestSchema, IDeclarativeCopilot, Platform, Colors } from "@microsoft/teamsfx-api";
import { WrapDriverContext } from "../../util/wrapUtil";
import { DeclarativeCopilotManifestValidationResult } from "../interfaces/ValidationResult";
export declare class CopilotGptManifestUtils {
    readCopilotGptManifestFile(path: string): Promise<Result<DeclarativeCopilotManifestSchema, FxError>>;
    /**
     * Get Declarative Copilot Manifest with env value filled.
     * @param path path of declaraitve Copilot
     * @returns resolved manifest
     */
    getManifest(path: string, context?: WrapDriverContext): Promise<Result<DeclarativeCopilotManifestSchema, FxError>>;
    writeCopilotGptManifestFile(manifest: DeclarativeCopilotManifestSchema, path: string): Promise<Result<undefined, FxError>>;
    validateAgainstSchema(declaraitveCopilot: IDeclarativeCopilot, manifestPath: string, context?: WrapDriverContext): Promise<Result<DeclarativeCopilotManifestValidationResult, FxError>>;
    addAction(copilotGptPath: string, id: string, pluginFile: string): Promise<Result<DeclarativeCopilotManifestSchema, FxError>>;
    logValidationErrors(validationRes: DeclarativeCopilotManifestValidationResult, platform: Platform, pluginPath: string): string | Array<{
        content: string;
        color: Colors;
    }>;
}
export declare const copilotGptManifestUtils: CopilotGptManifestUtils;
//# sourceMappingURL=CopilotGptManifestUtils.d.ts.map