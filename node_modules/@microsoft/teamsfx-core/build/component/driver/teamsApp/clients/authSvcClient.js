"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthSvcClient = void 0;
const utils_1 = require("../utils/utils");
const wrappedAxiosClient_1 = require("../../../../common/wrappedAxiosClient");
// eslint-disable-next-line @typescript-eslint/no-namespace
var AuthSvcClient;
(function (AuthSvcClient) {
    const baseUrl = "https://authsvc.teams.microsoft.com";
    /**
     * Creates a new axios instance to prevent setting the accessToken on global instance.
     * @param {string}  authSvcToken
     * @returns {AxiosInstance}
     */
    function createRequesterWithToken(authSvcToken) {
        const instance = wrappedAxiosClient_1.WrappedAxiosClient.create({
            baseURL: baseUrl,
        });
        instance.defaults.headers.common["Authorization"] = `Bearer ${authSvcToken}`;
        instance.defaults.headers.common["Client-Source"] = "teamstoolkit";
        return instance;
    }
    /**
     * Get the region of M365 user
     * @param authSvcToken
     * @returns e.g. https://dev.teams.microsoft.com/apac, https://dev.teams.microsoft.com/amer
     */
    async function getRegion(authSvcToken) {
        var _a, _b;
        const requester = createRequesterWithToken(authSvcToken);
        try {
            const response = await utils_1.RetryHandler.Retry(() => requester.post(`/v1.0/users/region`));
            return (_b = (_a = response === null || response === void 0 ? void 0 : response.data) === null || _a === void 0 ? void 0 : _a.regionGtms) === null || _b === void 0 ? void 0 : _b.teamsDevPortal;
        }
        catch (e) {
            return undefined;
        }
    }
    AuthSvcClient.getRegion = getRegion;
})(AuthSvcClient = exports.AuthSvcClient || (exports.AuthSvcClient = {}));
//# sourceMappingURL=authSvcClient.js.map