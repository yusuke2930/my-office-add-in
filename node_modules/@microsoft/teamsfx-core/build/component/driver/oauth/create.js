"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateOauthDriver = void 0;
const tslib_1 = require("tslib");
const hooks_1 = require("@feathersjs/hooks");
const localizeUtils_1 = require("../../../common/localizeUtils");
const addStartAndEndTelemetry_1 = require("../middleware/addStartAndEndTelemetry");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const common_1 = require("../../../error/common");
const constants_1 = require("./utility/constants");
const outputEnvironmentVariableUndefinedError_1 = require("../error/outputEnvironmentVariableUndefinedError");
const createOauthOutputs_1 = require("./interface/createOauthOutputs");
const utils_1 = require("../util/utils");
const constants_2 = require("../teamsApp/constants");
const appStudioClient_1 = require("../teamsApp/clients/appStudioClient");
const OauthRegistration_1 = require("../teamsApp/interfaces/OauthRegistration");
const oauthNameTooLong_1 = require("./error/oauthNameTooLong");
const tools_1 = require("../../../common/tools");
const utility_1 = require("./utility/utility");
const questionMW_1 = require("../../middleware/questionMW");
const questionNames_1 = require("../../../question/questionNames");
const typedi_1 = require("typedi");
const actionName = "oauth/register"; // DO NOT MODIFY the name
const helpLink = "https://aka.ms/teamsfx-actions/oauth-register";
const supportedFlows = ["authorizationCode"];
let CreateOauthDriver = class CreateOauthDriver {
    constructor() {
        this.description = localizeUtils_1.getLocalizedString("driver.oauth.description.create");
        this.progressTitle = localizeUtils_1.getLocalizedString("driver.oauth.title.create");
    }
    async execute(args, context, outputEnvVarNames) {
        var _a, _b, _c, _d, _e, _f;
        const summaries = [];
        const outputs = new Map();
        try {
            (_a = context.logProvider) === null || _a === void 0 ? void 0 : _a.info(localizeUtils_1.getLocalizedString(constants_1.logMessageKeys.startExecuteDriver, actionName));
            if (!outputEnvVarNames) {
                throw new outputEnvironmentVariableUndefinedError_1.OutputEnvironmentVariableUndefinedError(actionName);
            }
            const state = utils_1.loadStateFromEnv(outputEnvVarNames);
            const appStudioTokenRes = await context.m365TokenProvider.getAccessToken({
                scopes: constants_2.AppStudioScopes,
            });
            if (appStudioTokenRes.isErr()) {
                throw appStudioTokenRes.error;
            }
            const appStudioToken = appStudioTokenRes.value;
            if (state && state.configurationId) {
                try {
                    await appStudioClient_1.AppStudioClient.getOauthRegistrationById(appStudioToken, state.configurationId);
                    (_b = context.logProvider) === null || _b === void 0 ? void 0 : _b.info(localizeUtils_1.getLocalizedString(constants_1.logMessageKeys.skipCreateOauth, outputEnvVarNames.get(createOauthOutputs_1.OutputKeys.configurationId)));
                }
                catch (error) {
                    (_c = context.logProvider) === null || _c === void 0 ? void 0 : _c.warning(localizeUtils_1.getLocalizedString(constants_1.logMessageKeys.oauthNotFound, outputEnvVarNames.get(createOauthOutputs_1.OutputKeys.configurationId)));
                }
            }
            else {
                const clientId = process.env[questionNames_1.QuestionNames.OauthClientId];
                if (clientId) {
                    args.clientId = clientId;
                }
                const clientSecret = process.env[questionNames_1.QuestionNames.OauthClientSecret];
                if (clientSecret) {
                    args.clientSecret = clientSecret;
                }
                this.validateArgs(args);
                const authInfo = await utility_1.getandValidateOauthInfoFromSpec(args, context, actionName);
                const oauthRegistration = await this.mapArgsToOauthRegistration(context.m365TokenProvider, args, authInfo);
                const oauthRegistrationRes = await appStudioClient_1.AppStudioClient.createOauthRegistration(appStudioToken, oauthRegistration);
                outputs.set(outputEnvVarNames.get(createOauthOutputs_1.OutputKeys.configurationId), oauthRegistrationRes.configurationRegistrationId.oAuthConfigId);
                const summary = localizeUtils_1.getLocalizedString(constants_1.logMessageKeys.successCreateOauth, oauthRegistrationRes.configurationRegistrationId.oAuthConfigId);
                (_d = context.logProvider) === null || _d === void 0 ? void 0 : _d.info(summary);
                summaries.push(summary);
            }
            return {
                result: teamsfx_api_1.ok(outputs),
                summaries: summaries,
            };
        }
        catch (error) {
            if (error instanceof teamsfx_api_1.UserError || error instanceof teamsfx_api_1.SystemError) {
                (_e = context.logProvider) === null || _e === void 0 ? void 0 : _e.error(localizeUtils_1.getLocalizedString(constants_1.logMessageKeys.failedExecuteDriver, actionName, error.displayMessage));
                return {
                    result: teamsfx_api_1.err(error),
                    summaries: summaries,
                };
            }
            const message = JSON.stringify(error);
            (_f = context.logProvider) === null || _f === void 0 ? void 0 : _f.error(localizeUtils_1.getLocalizedString(constants_1.logMessageKeys.failedExecuteDriver, actionName, message));
            return {
                result: teamsfx_api_1.err(common_1.assembleError(error, actionName)),
                summaries: summaries,
            };
        }
    }
    validateArgs(args) {
        const invalidParameters = [];
        if (typeof args.name !== "string" || !args.name) {
            invalidParameters.push("name");
        }
        if (args.name.length > 128) {
            throw new oauthNameTooLong_1.OauthNameTooLongError(actionName);
        }
        if (typeof args.appId !== "string" || !args.appId) {
            invalidParameters.push("appId");
        }
        if (typeof args.apiSpecPath !== "string" || !args.apiSpecPath) {
            invalidParameters.push("apiSpecPath");
        }
        if (args.applicableToApps &&
            args.applicableToApps !== OauthRegistration_1.OauthRegistrationAppType.AnyApp &&
            args.applicableToApps !== OauthRegistration_1.OauthRegistrationAppType.SpecificApp) {
            invalidParameters.push("applicableToApps");
        }
        if (args.targetAudience &&
            args.targetAudience !== OauthRegistration_1.OauthRegistrationTargetAudience.AnyTenant &&
            args.targetAudience !== OauthRegistration_1.OauthRegistrationTargetAudience.HomeTenant) {
            invalidParameters.push("targetAudience");
        }
        if (typeof args.flow !== "string" || !args.flow || !supportedFlows.includes(args.flow)) {
            invalidParameters.push("flow");
        }
        if (typeof args.clientId !== "string" || !args.clientId) {
            invalidParameters.push("clientId");
        }
        if (args.clientSecret && !this.validateSecret(args.clientSecret)) {
            invalidParameters.push("clientSecret");
        }
        if (args.refreshUrl && typeof args.refreshUrl !== "string") {
            invalidParameters.push("refreshUrl");
        }
        if (invalidParameters.length > 0) {
            throw new common_1.InvalidActionInputError(actionName, invalidParameters, helpLink);
        }
    }
    validateSecret(clientSecret) {
        if (typeof clientSecret !== "string") {
            return false;
        }
        if (clientSecret.length > constants_1.maxSecretLength || clientSecret.length < constants_1.minSecretLength) {
            return false;
        }
        return true;
    }
    async mapArgsToOauthRegistration(tokenProvider, args, authInfo) {
        var _a, _b;
        const currentUserRes = await tokenProvider.getJsonObject({ scopes: tools_1.GraphScopes });
        if (currentUserRes.isErr()) {
            throw currentUserRes.error;
        }
        const currentUser = currentUserRes.value;
        const userId = currentUser["oid"];
        const targetAudience = args.targetAudience
            ? args.targetAudience
            : OauthRegistration_1.OauthRegistrationTargetAudience.AnyTenant;
        const applicableToApps = args.applicableToApps
            ? args.applicableToApps
            : OauthRegistration_1.OauthRegistrationAppType.AnyApp;
        return {
            description: args.name,
            targetUrlsShouldStartWith: authInfo.domain,
            applicableToApps: applicableToApps,
            m365AppId: applicableToApps === OauthRegistration_1.OauthRegistrationAppType.SpecificApp ? args.appId : "",
            targetAudience: targetAudience,
            clientId: args.clientId,
            clientSecret: (_a = args.clientSecret) !== null && _a !== void 0 ? _a : "",
            authorizationEndpoint: authInfo.authorizationEndpoint,
            tokenExchangeEndpoint: authInfo.tokenExchangeEndpoint,
            tokenRefreshEndpoint: (_b = args.refreshUrl) !== null && _b !== void 0 ? _b : authInfo.tokenRefreshEndpoint,
            scopes: authInfo.scopes,
            // TODO: add this part back after TDP update
            // manageableByUsers: [
            //   {
            //     userId: userId,
            //     accessType: OauthRegistrationUserAccessType.ReadWrite,
            //   },
            // ],
        };
    }
};
tslib_1.__decorate([
    hooks_1.hooks([questionMW_1.QuestionMW("oauth", true), addStartAndEndTelemetry_1.addStartAndEndTelemetry(actionName, actionName)]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, Map]),
    tslib_1.__metadata("design:returntype", Promise)
], CreateOauthDriver.prototype, "execute", null);
CreateOauthDriver = tslib_1.__decorate([
    typedi_1.Service(actionName)
], CreateOauthDriver);
exports.CreateOauthDriver = CreateOauthDriver;
//# sourceMappingURL=create.js.map