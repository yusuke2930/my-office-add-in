"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateOauthDriver = void 0;
const tslib_1 = require("tslib");
const hooks_1 = require("@feathersjs/hooks");
const localizeUtils_1 = require("../../../common/localizeUtils");
const addStartAndEndTelemetry_1 = require("../middleware/addStartAndEndTelemetry");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const constants_1 = require("./utility/constants");
const common_1 = require("../../../error/common");
const oauthNameTooLong_1 = require("./error/oauthNameTooLong");
const OauthRegistration_1 = require("../teamsApp/interfaces/OauthRegistration");
const appStudioClient_1 = require("../teamsApp/clients/appStudioClient");
const constants_2 = require("../teamsApp/constants");
const utility_1 = require("./utility/utility");
const typedi_1 = require("typedi");
const actionName = "oauth/update"; // DO NOT MODIFY the name
const helpLink = "https://aka.ms/teamsfx-actions/oauth-update";
let UpdateOauthDriver = class UpdateOauthDriver {
    constructor() {
        this.description = localizeUtils_1.getLocalizedString("driver.oauth.description.create");
        this.progressTitle = localizeUtils_1.getLocalizedString("driver.oauth.title.create");
    }
    async execute(args, context, outputEnvVarNames) {
        var _a, _b, _c, _d, _e;
        const summaries = [];
        const outputs = new Map();
        try {
            (_a = context.logProvider) === null || _a === void 0 ? void 0 : _a.info(localizeUtils_1.getLocalizedString(constants_1.logMessageKeys.startExecuteDriver, actionName));
            this.validateArgs(args);
            const authInfo = await utility_1.getandValidateOauthInfoFromSpec(args, context, actionName);
            const domain = authInfo.domain;
            const appStudioTokenRes = await context.m365TokenProvider.getAccessToken({
                scopes: constants_2.AppStudioScopes,
            });
            if (appStudioTokenRes.isErr()) {
                throw appStudioTokenRes.error;
            }
            const appStudioToken = appStudioTokenRes.value;
            const getOauthRes = await appStudioClient_1.AppStudioClient.getOauthRegistrationById(appStudioToken, args.configurationId);
            const diffMsgs = this.compareOauthRegistration(getOauthRes, args, domain);
            // If there is no difference, skip the update
            if (!diffMsgs || diffMsgs.length === 0) {
                const summary = localizeUtils_1.getLocalizedString(constants_1.logMessageKeys.skipUpdateOauth);
                (_b = context.logProvider) === null || _b === void 0 ? void 0 : _b.info(summary);
                summaries.push(summary);
                return {
                    result: teamsfx_api_1.ok(outputs),
                    summaries: summaries,
                };
            }
            // If there is difference, ask user to confirm the update
            // Skip confirm if only targetUrlsShouldStartWith is different when the url contains devtunnel
            if (!this.shouldSkipConfirm(diffMsgs, getOauthRes.targetUrlsShouldStartWith, domain)) {
                const userConfirm = await context.ui.confirm({
                    name: "confirm-update-oauth",
                    title: localizeUtils_1.getLocalizedString("driver.oauth.confirm.update", diffMsgs.join(",\n")),
                    default: true,
                });
                if (userConfirm.isErr()) {
                    throw userConfirm.error;
                }
            }
            const oauth = this.mapArgsToOauthRegistration(args, domain);
            const updateApiKeyRes = await appStudioClient_1.AppStudioClient.updateOauthRegistration(appStudioToken, oauth, args.configurationId);
            void context.ui.showMessage("info", localizeUtils_1.getLocalizedString("driver.oauth.info.update", diffMsgs.join(",\n")), false);
            const summary = localizeUtils_1.getLocalizedString(constants_1.logMessageKeys.successUpdateOauth);
            (_c = context.logProvider) === null || _c === void 0 ? void 0 : _c.info(summary);
            summaries.push(summary);
            return {
                result: teamsfx_api_1.ok(outputs),
                summaries: summaries,
            };
        }
        catch (error) {
            if (error instanceof teamsfx_api_1.UserError || error instanceof teamsfx_api_1.SystemError) {
                (_d = context.logProvider) === null || _d === void 0 ? void 0 : _d.error(localizeUtils_1.getLocalizedString(constants_1.logMessageKeys.failedExecuteDriver, actionName, error.displayMessage));
                return {
                    result: teamsfx_api_1.err(error),
                    summaries: summaries,
                };
            }
            const message = JSON.stringify(error);
            (_e = context.logProvider) === null || _e === void 0 ? void 0 : _e.error(localizeUtils_1.getLocalizedString(constants_1.logMessageKeys.failedExecuteDriver, actionName, message));
            return {
                result: teamsfx_api_1.err(common_1.assembleError(error, actionName)),
                summaries: summaries,
            };
        }
    }
    validateArgs(args) {
        const invalidParameters = [];
        if (typeof args.configurationId !== "string" || !args.configurationId) {
            invalidParameters.push("registrationId");
        }
        if (typeof args.name !== "string" || !args.name) {
            invalidParameters.push("name");
        }
        if (args.name.length > 128) {
            throw new oauthNameTooLong_1.OauthNameTooLongError(actionName);
        }
        if (typeof args.appId !== "string" || !args.appId) {
            invalidParameters.push("appId");
        }
        if (typeof args.apiSpecPath !== "string" || !args.apiSpecPath) {
            invalidParameters.push("apiSpecPath");
        }
        if (args.applicableToApps &&
            args.applicableToApps !== OauthRegistration_1.OauthRegistrationAppType.AnyApp &&
            args.applicableToApps !== OauthRegistration_1.OauthRegistrationAppType.SpecificApp) {
            invalidParameters.push("applicableToApps");
        }
        if (args.targetAudience &&
            args.targetAudience !== OauthRegistration_1.OauthRegistrationTargetAudience.AnyTenant &&
            args.targetAudience !== OauthRegistration_1.OauthRegistrationTargetAudience.HomeTenant) {
            invalidParameters.push("targetAudience");
        }
        if (invalidParameters.length > 0) {
            throw new common_1.InvalidActionInputError(actionName, invalidParameters, helpLink);
        }
    }
    compareOauthRegistration(current, input, domain) {
        const diffMsgs = [];
        if (current.description !== input.name) {
            diffMsgs.push(`description: ${current.description} => ${input.name}`);
        }
        if (input.applicableToApps && current.applicableToApps !== input.applicableToApps) {
            let msg = `applicableToApps: ${current.applicableToApps} => ${input.applicableToApps}`;
            if (input.applicableToApps === "SpecificApp") {
                msg += `, m365AppId: ${input.appId}`;
            }
            diffMsgs.push(msg);
        }
        if (input.targetAudience && current.targetAudience !== input.targetAudience) {
            diffMsgs.push(`targetAudience: ${current.targetAudience} => ${input.targetAudience}`);
        }
        // Compare domain
        if (current.targetUrlsShouldStartWith.length !== domain.length ||
            !current.targetUrlsShouldStartWith.every((value) => domain.includes(value)) ||
            !domain.every((value) => current.targetUrlsShouldStartWith.includes(value))) {
            diffMsgs.push(`targetUrlsShouldStartWith: ${current.targetUrlsShouldStartWith.join(",")} => ${domain.join(",")}`);
        }
        return diffMsgs;
    }
    // Should skip confirm box if only targetUrlsShouldStartWith is different and the url contains devtunnel
    shouldSkipConfirm(diffMsgs, getDomain, domain) {
        return (diffMsgs.length === 1 &&
            diffMsgs[0].includes("targetUrlsShouldStartWith") &&
            getDomain.length === domain.length &&
            getDomain.every((value) => value.includes("devtunnel")) &&
            domain.every((value) => value.includes("devtunnel")));
    }
    mapArgsToOauthRegistration(args, domain) {
        const targetAudience = args.targetAudience
            ? args.targetAudience
            : undefined;
        const applicableToApps = args.applicableToApps
            ? args.applicableToApps
            : undefined;
        return {
            description: args.name,
            targetUrlsShouldStartWith: domain,
            applicableToApps: applicableToApps,
            m365AppId: applicableToApps === OauthRegistration_1.OauthRegistrationAppType.SpecificApp ? args.appId : "",
            targetAudience: targetAudience,
        };
    }
};
tslib_1.__decorate([
    hooks_1.hooks([addStartAndEndTelemetry_1.addStartAndEndTelemetry(actionName, actionName)]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, Map]),
    tslib_1.__metadata("design:returntype", Promise)
], UpdateOauthDriver.prototype, "execute", null);
UpdateOauthDriver = tslib_1.__decorate([
    typedi_1.Service(actionName)
], UpdateOauthDriver);
exports.UpdateOauthDriver = UpdateOauthDriver;
//# sourceMappingURL=update.js.map