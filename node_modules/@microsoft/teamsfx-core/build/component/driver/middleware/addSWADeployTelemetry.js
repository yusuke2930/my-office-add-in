"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.addSWADeployTelemetry = void 0;
const teamsFxTelemetryReporter_1 = require("../../utils/teamsFxTelemetryReporter");
const commonConstant_1 = require("../../constant/commonConstant");
const perf_hooks_1 = require("perf_hooks");
const constants_1 = require("../../constants");
const addStartAndEndTelemetry_1 = require("./addStartAndEndTelemetry");
const stringUtils_1 = require("../../../common/stringUtils");
/**
 * A special telemetry middleware for SWA deployment.
 * @param eventName The event name to be sent.
 */
function addSWADeployTelemetry(eventName) {
    return async (ctx, next) => {
        const name = ctx.arguments[4];
        const command = stringUtils_1.maskSecretValues(ctx.arguments[0].args);
        // only add telemetry for script
        if (!(name === null || name === void 0 ? void 0 : name.includes("deploy to Azure Static Web Apps"))) {
            await next();
            return;
        }
        const driverContext = ctx.arguments[1];
        let telemetryReporter = undefined;
        if (driverContext.telemetryReporter) {
            telemetryReporter = new teamsFxTelemetryReporter_1.TeamsFxTelemetryReporter(driverContext.telemetryReporter, {
                componentName: commonConstant_1.TelemetryConstant.DEPLOY_TO_SWA_COMPONENT,
            });
        }
        telemetryReporter === null || telemetryReporter === void 0 ? void 0 : telemetryReporter.sendStartEvent({ eventName });
        const startTime = perf_hooks_1.performance.now();
        await next();
        const timeCost = perf_hooks_1.performance.now() - startTime;
        const result = addStartAndEndTelemetry_1.isExecutionResult(ctx.result) ? ctx.result.result : ctx.result;
        const telemetryConfig = {
            eventName: eventName,
            properties: Object.assign({ command: command }, driverContext.telemetryProperties),
            measurements: { [constants_1.TelemetryConstants.properties.timeCost]: timeCost },
        };
        if (result.isOk()) {
            telemetryReporter === null || telemetryReporter === void 0 ? void 0 : telemetryReporter.sendEndEvent(telemetryConfig);
        }
        else {
            telemetryReporter === null || telemetryReporter === void 0 ? void 0 : telemetryReporter.sendEndEvent(telemetryConfig, result.error);
        }
    };
}
exports.addSWADeployTelemetry = addSWADeployTelemetry;
//# sourceMappingURL=addSWADeployTelemetry.js.map