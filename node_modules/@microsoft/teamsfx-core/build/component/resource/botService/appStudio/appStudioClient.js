"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppStudioClient = void 0;
const tslib_1 = require("tslib");
/**
 * @author Qianhao Dong <qidon@microsoft.com>
 */
const IBotRegistration_1 = require("./interfaces/IBotRegistration");
const commonConstant_1 = require("../../../constant/commonConstant");
const appStudioClient_1 = require("../../../driver/teamsApp/clients/appStudioClient");
const constants_1 = require("../../../driver/teamsApp/constants");
const common_1 = require("../common");
const constants_2 = require("../constants");
const errors_1 = require("../errors");
const messages_1 = require("../messages");
const retryHandler_1 = require("../retryHandler");
const strings_1 = require("../strings");
const globalVars_1 = require("../../../../core/globalVars");
const hooks_1 = require("@feathersjs/hooks");
const wrappedAxiosClient_1 = require("../../../../common/wrappedAxiosClient");
function handleBotFrameworkError(e, apiName) {
    var _a, _b, _c, _d;
    if (((_a = e.response) === null || _a === void 0 ? void 0 : _a.status) === commonConstant_1.HttpStatusCode.NOTFOUND) {
        return undefined; // Stands for NotFound.
    }
    else if (((_b = e.response) === null || _b === void 0 ? void 0 : _b.status) === commonConstant_1.HttpStatusCode.UNAUTHORIZED) {
        throw new errors_1.BotFrameworkNotAllowedToAcquireTokenError();
    }
    else if (((_c = e.response) === null || _c === void 0 ? void 0 : _c.status) === commonConstant_1.HttpStatusCode.FORBIDDEN) {
        throw new errors_1.BotFrameworkForbiddenResultError();
    }
    else if (((_d = e.response) === null || _d === void 0 ? void 0 : _d.status) === commonConstant_1.HttpStatusCode.TOOMANYREQS) {
        throw new errors_1.BotFrameworkConflictResultError();
    }
    else {
        e.teamsfxUrlName = constants_2.TeamsFxUrlNames[apiName];
        throw appStudioClient_1.AppStudioClient.wrapException(e, apiName);
    }
}
class AppStudioClient {
    static newAxiosInstance(accessToken) {
        accessToken = errors_1.CheckThrowSomethingMissing(strings_1.ConfigNames.APPSTUDIO_TOKEN, accessToken);
        const instance = wrappedAxiosClient_1.WrappedAxiosClient.create({
            headers: {
                post: {
                    Authorization: `Bearer ${accessToken}`,
                    "Client-Source": "teamstoolkit",
                },
                get: {
                    Authorization: `Bearer ${accessToken}`,
                    "Client-Source": "teamstoolkit",
                },
            },
        });
        return instance;
    }
    /**
     * Set user region
     * @param _region e.g. https://dev.teams.microsoft.com/amer
     */
    static setRegion(region) {
        AppStudioClient.baseUrl = region;
    }
    static async getBotRegistration(token, botId) {
        const axiosInstance = AppStudioClient.newAxiosInstance(token);
        try {
            const response = await retryHandler_1.RetryHandler.Retry(() => axiosInstance.get(`${AppStudioClient.baseUrl}/api/botframework/${botId}`));
            if (common_1.isHappyResponse(response)) {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                return response.data; // response cannot be undefined as it's checked in isHappyResponse.
            }
            else {
                // Defensive code and it should never reach here.
                throw new Error("Failed to get data");
            }
        }
        catch (e) {
            handleBotFrameworkError(e, constants_1.APP_STUDIO_API_NAMES.GET_BOT);
        }
    }
    static async listBots(token) {
        const axiosInstance = AppStudioClient.newAxiosInstance(token);
        try {
            const response = await retryHandler_1.RetryHandler.Retry(() => axiosInstance.get(`${AppStudioClient.baseUrl}/api/botframework`));
            if (common_1.isHappyResponse(response)) {
                return response.data; // response cannot be undefined as it's checked in isHappyResponse.
            }
            else {
                // Defensive code and it should never reach here.
                throw new Error("Failed to get data");
            }
        }
        catch (e) {
            handleBotFrameworkError(e, constants_1.APP_STUDIO_API_NAMES.LIST_BOT);
        }
    }
    static async deleteBot(token, botId) {
        const axiosInstance = AppStudioClient.newAxiosInstance(token);
        try {
            await retryHandler_1.RetryHandler.Retry(() => axiosInstance.delete(`${AppStudioClient.baseUrl}/api/botframework/${botId}`));
        }
        catch (e) {
            handleBotFrameworkError(e, constants_1.APP_STUDIO_API_NAMES.DELETE_BOT);
        }
    }
    static async createBotRegistration(token, registration, checkExistence = true, context) {
        var _a;
        const axiosInstance = AppStudioClient.newAxiosInstance(token);
        if (registration.botId && checkExistence) {
            const botReg = await AppStudioClient.getBotRegistration(token, registration.botId);
            if (botReg) {
                (_a = context === null || context === void 0 ? void 0 : context.logProvider) === null || _a === void 0 ? void 0 : _a.info(messages_1.Messages.BotResourceExist("Appstudio"));
                return;
            }
        }
        try {
            const response = await retryHandler_1.RetryHandler.Retry(() => axiosInstance.post(`${AppStudioClient.baseUrl}/api/botframework`, registration));
            if (!common_1.isHappyResponse(response)) {
                throw new errors_1.ProvisionError(strings_1.CommonStrings.APP_STUDIO_BOT_REGISTRATION);
            }
        }
        catch (e) {
            handleBotFrameworkError(e, constants_1.APP_STUDIO_API_NAMES.CREATE_BOT);
        }
        return;
    }
    static async updateMessageEndpoint(token, botId, endpoint) {
        const botReg = await AppStudioClient.getBotRegistration(token, botId);
        if (!botReg) {
            throw new errors_1.BotRegistrationNotFoundError(botId);
        }
        botReg.messagingEndpoint = endpoint;
        if (botReg.configuredChannels === undefined || botReg.configuredChannels.length === 0) {
            botReg.configuredChannels = [IBotRegistration_1.BotChannelType.MicrosoftTeams];
        }
        await AppStudioClient.updateBotRegistration(token, botReg);
        return;
    }
    static async updateBotRegistration(token, botReg) {
        const axiosInstance = AppStudioClient.newAxiosInstance(token);
        try {
            const response = await retryHandler_1.RetryHandler.Retry(() => 
            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
            axiosInstance.post(`${AppStudioClient.baseUrl}/api/botframework/${botReg.botId}`, botReg));
            if (!common_1.isHappyResponse(response)) {
                throw new errors_1.ConfigUpdatingError(strings_1.ConfigNames.MESSAGE_ENDPOINT);
            }
        }
        catch (e) {
            handleBotFrameworkError(e, constants_1.APP_STUDIO_API_NAMES.UPDATE_BOT);
        }
        return;
    }
}
AppStudioClient.baseUrl = constants_1.getAppStudioEndpoint();
tslib_1.__decorate([
    hooks_1.hooks([globalVars_1.ErrorContextMW({ source: "Teams", component: "AppStudioClient" })]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, String]),
    tslib_1.__metadata("design:returntype", Promise)
], AppStudioClient, "getBotRegistration", null);
tslib_1.__decorate([
    hooks_1.hooks([globalVars_1.ErrorContextMW({ source: "Teams", component: "AppStudioClient" })]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", Promise)
], AppStudioClient, "listBots", null);
tslib_1.__decorate([
    hooks_1.hooks([globalVars_1.ErrorContextMW({ source: "Teams", component: "AppStudioClient" })]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, String]),
    tslib_1.__metadata("design:returntype", Promise)
], AppStudioClient, "deleteBot", null);
tslib_1.__decorate([
    hooks_1.hooks([globalVars_1.ErrorContextMW({ source: "Teams", component: "AppStudioClient" })]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, Object, Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], AppStudioClient, "createBotRegistration", null);
tslib_1.__decorate([
    hooks_1.hooks([globalVars_1.ErrorContextMW({ source: "Teams", component: "AppStudioClient" })]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], AppStudioClient, "updateBotRegistration", null);
exports.AppStudioClient = AppStudioClient;
//# sourceMappingURL=appStudioClient.js.map